public class MainActivity extends AppCompatActivity {

    private SensorManager sensorManager;
    private Sensor sensorAccelerometer;
    SensorEventListener sensorEventListener;
    TextView textViewMsg;

    private long lastTime = 0;
    private float last_x, last_y, last_z;
    private static final int SHAKE_THRESHOLD = 600;

    private long curTime;
    private long diffTime;
    private float speed;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        textViewMsg = findViewById(R.id.textViewMsg);
        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
        sensorAccelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);

        sensorEventListener = new SensorEventListener() {
            @Override
            public void onSensorChanged(SensorEvent event) {
                Sensor sensor = event.sensor;
                if ( sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
                    float x = event.values[0];
                    float y = event.values[1];
                    float z = event.values[2];

                    curTime = System.currentTimeMillis();

                    if ( (curTime -lastTime) > 100 ) {
                        diffTime = curTime -lastTime;
                        lastTime = curTime;

                        speed = Math.abs(x  - last_x )/ diffTime * 10000;
                        if (speed > SHAKE_THRESHOLD) {
                            textViewMsg.setText("ACCELEROMETER  x 방향  : " + speed );
                        }

                        last_x = x;
                        last_y = y;
                        last_z = z;
                    }
                }
            }


            @Override
            public void onAccuracyChanged(Sensor sensor, int accuracy) {

            }
        };
        //sensorManager.registerListener(sensorEventListener, sensorAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);

    }

    @Override
    protected void onPause() {
        super.onPause();
        sensorManager.unregisterListener(sensorEventListener);
    }

    @Override
    protected void onResume() {
        super.onResume();
        sensorManager.registerListener(sensorEventListener, sensorAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
    }
}
