package robot.hbsong.bluetest003;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Set;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {


    TextView logCatMessage;
    private static BluetoothAdapter mBluetoothAdapter;
    private static BluetoothDevice mDevice;


    private ConnectThread mConnectThread;
    private ConnectedThread mConnectedThread;
    byte[] wBuf;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        logCatMessage = (TextView)findViewById(R.id.textViewMonitor);

        Button mButtonLED1_ON = (Button) findViewById(R.id.buttonLED1_ON);
        mButtonLED1_ON.setOnClickListener(mButtonMotorONListener);
        Button mButtonLED2_ON = (Button) findViewById(R.id.buttonLED2_ON);
        mButtonLED2_ON.setOnClickListener(mButtonMotorONListener);
        Button mButtonLED3_ON = (Button) findViewById(R.id.buttonLED3_ON);
        mButtonLED3_ON.setOnClickListener(mButtonMotorONListener);
        Button mButtonLEDs_OFF = (Button) findViewById(R.id.buttonLED_OFF);
        mButtonLEDs_OFF.setOnClickListener(mButtonMotorONListener);


        blueToothSetup();

        mConnectThread = new ConnectThread(mDevice);
        mConnectThread.start();

    }

    View.OnClickListener mButtonMotorONListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {

            switch (v.getId()) {
                case R.id.buttonLED1_ON:
                    wBuf = new byte[] {0x31};       //  ASCII "1"
                    break;
                case R.id.buttonLED2_ON:
                    wBuf = new byte[] {0x32};       //  ASCII "2"
                    break;
                case R.id.buttonLED3_ON:
                    wBuf = new byte[] {0x33};       //  ASCII "3"
                    break;
                case R.id.buttonLED_OFF:
                    wBuf = new byte[] {0x34};       //  ASCII "4"
                    break;
                default:

                    break;
            }

            mConnectedThread.write(wBuf);
        }
    };


    Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            byte[] writeBuf = (byte[]) msg.obj;

            if ( writeBuf[0] == 0x4D) {
                logCatMessage.append("\n블루투스 장치 --> 스마트폰 전송 메세지");
                logCatMessage.append("\n\t\t -------->  " +  writeBuf[0] + "," + writeBuf[1] + "," + writeBuf[2]);
            } else if (writeBuf[0] == 0x53) {
                logCatMessage.append("\n블루투스 장치 --> 스마트폰 전송 메세지");
                logCatMessage.append("\n\t\t -------->  " +  writeBuf[0] + "," + writeBuf[1] + "," + writeBuf[2]);
            }

        }
    };


    private class ConnectThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final BluetoothDevice mmDevice;
        private final UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");

        public ConnectThread(BluetoothDevice device) {
            BluetoothSocket tmp = null;
            mmDevice = device;
            try {
                tmp = mmDevice.createRfcommSocketToServiceRecord(MY_UUID);
            } catch (IOException e) {
                logCatMessage.post(new Runnable() {
                    @Override
                    public void run() {
                        logCatMessage.append("\n\n... 통신에러 ... \n\t블루투스 장치의 전원을 확인 하세요!!");
                    }
                });
            }
            mmSocket = tmp;
            logCatMessage.post(new Runnable() {
                @Override
                public void run() {
                    logCatMessage.append("\n블루투스 통신을 위한 소켓이 생성 되었습니다!!");
                }
            });
        }
        public void run() {
            mBluetoothAdapter.cancelDiscovery();
            try {
                mmSocket.connect();
            } catch (IOException connectException) {
                try {
                    logCatMessage.post(new Runnable() {
                        @Override
                        public void run() {
                            logCatMessage.append("\n\n... 통신에러 ... \n\t블루투스 장치의 프로그램 실행을 확인 하세요!!");
                        }
                    });
                    mmSocket.close();
                } catch (IOException closeException) { }
                return;
            }
            logCatMessage.post(new Runnable() {
                @Override
                public void run() {
                    logCatMessage.append("\n블루투스 장치에 프로그램이 실행 되고 있습니다!!");
                }
            });

            mConnectedThread = new ConnectedThread(mmSocket);
            mConnectedThread.start();
        }
        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) { }
        }
    }

    private class ConnectedThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;
        private int  readBytes =0;
        byte[] buffer = new byte[1024];

        public ConnectedThread(BluetoothSocket socket) {
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;
            try {
                tmpIn = mmSocket.getInputStream();
                tmpOut =mmSocket.getOutputStream();
            } catch (IOException e) { }
            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }
        public void run() {

            while (true) {

                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                try {
                    if (mmInStream.available() == 3) {
                        readBytes = mmInStream.read(buffer,0, 3);
                        mHandler.obtainMessage(1, 0, 3, buffer).sendToTarget();
                        // break;
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    break;
                }
            }
        }
        public void write(byte[] bytes) {
            try {
                logCatMessage.append("\n스마트폰 --> 블루투스 장치 전송 메세지 ");
                logCatMessage.append("\n   Data     --> " + bytes[0] );
                mmOutStream.write(bytes);
            } catch (IOException e) { }
        }
        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) { }
        }
    }

    void blueToothSetup() {
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if (mBluetoothAdapter == null) {
            // Device does not support Bluetooth
            logCatMessage.append("\n스마트폰에 블루투스 기능이 내장되어 있는지 확인 하세요!!");

        }

        if (!mBluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, 1);
        } else {
            logCatMessage.append("\n블루투스 기능이 활성화(Enable) 되어 있습니다!!\n");
        }


        Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
        logCatMessage.append("\n등록된(Bonded) 블루투스 장치 숫자 : " + pairedDevices.size());
        if (pairedDevices.size() > 0) {
            for (BluetoothDevice device : pairedDevices) {
                mDevice = device;
                logCatMessage.append("\n디바이스 :   " + mDevice.getName());
                logCatMessage.append("\n주소 :   "  + mDevice.getAddress());
            }
        }
    }
}


<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context="robot.hbsong.bluetest003.MainActivity">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:textAppearance="?android:attr/textAppearanceMedium"
        android:text="\t\t&lt;&lt; Monitor >>\n\n"
        android:id="@+id/textViewMonitor"
        android:layout_alignParentTop="true"
        android:layout_alignParentStart="true"
        android:gravity="bottom" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="LED1 ON"
        android:id="@+id/buttonLED1_ON"
        android:layout_marginBottom="30dp"
        android:layout_above="@+id/buttonLED_OFF"
        android:layout_alignParentStart="true" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="LED3 ON"
        android:id="@+id/buttonLED3_ON"
        android:layout_alignBaseline="@+id/buttonLED2_ON"
        android:layout_alignBottom="@+id/buttonLED2_ON"
        android:layout_alignParentEnd="true" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="LED OFF"
        android:id="@+id/buttonLED_OFF"
        android:layout_marginBottom="13dp"
        android:layout_alignParentBottom="true"
        android:layout_alignParentEnd="true" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="LED2 ON"
        android:id="@+id/buttonLED2_ON"
        android:layout_alignBaseline="@+id/buttonLED1_ON"
        android:layout_alignBottom="@+id/buttonLED1_ON"
        android:layout_centerHorizontal="true" />
</RelativeLayout>
